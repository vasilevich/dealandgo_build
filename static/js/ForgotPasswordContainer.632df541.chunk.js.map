{"version":3,"sources":["gui/components/unAuthenticatedPage/UnAuthenticatedPage.tsx","gui/components/inputBox/InputBox.tsx","gui/components/inputBox/InputBox.module.scss","gui/pages/mainRouter/pages/forgotPassword/ForgotPassword.module.scss","gui/pages/mainRouter/pages/forgotPassword/components/forgotPasswordForm/components/forgotPasswordBeforeEmailForm/ForgotPasswordBeforeEmailForm.tsx","gui/pages/mainRouter/pages/forgotPassword/components/forgotPasswordForm/components/forgotPasswordAfterEmailTokenForm/ForgotPasswordAfterEmailTokenForm.tsx","gui/pages/mainRouter/pages/forgotPassword/components/forgotPasswordForm/ForgotPasswordForm.tsx","data/redux/containers/forgotPasswordFormContainer/ForgotPasswordFormContainer.ts","gui/pages/mainRouter/pages/forgotPassword/ForgotPassword.tsx","data/redux/containers/forgotPasswordContainer/ForgotPasswordContainer.ts"],"names":["UnAuthenticatedPage","state","signedIn","this","props","navigateOnLogin","prevProps","handlePermissionBehavior","children","nextProps","prevState","React","Component","defaultProps","navigateToControlPanel","InputBox","loading","container","spacing","className","styles","item","xs","style","marginTop","sm","topTitle","component","variant","spinner","title","description","middleComponents","nextButtonLink","to","linksMap","forgotPassword","nextButtonText","nextButtonClick","onClick","bottomComponents","memo","module","exports","ForgotPasswordBeforeEmailForm","emailVerified","emailVerification","verified","initialValues","email","validationSchema","Yup","required","onSubmit","values","a","setSubmitting","sendPasswordReset","then","sendEmailVerification","submitForm","isSubmitting","touched","errors","setFieldValue","translate","Grid","condition","userExist","passwordVerificationSent","sent","Typography","marginBottom","FormikTextInput","label","name","autoComplete","LinkBlockContainer","register","NextButton","formValues","Promise","resolve","setTimeout","invalidLogin","retypePasswordRandomName","Date","getTime","Math","round","random","ForgotPasswordAfterEmailTokenForm","token","password","min","max","matches","oneOf","undefined","updatePassword","FormikPasswordInput","ForgotPasswordForm","isTokenExpired","isBadToken","ForgotPasswordFormContainer","connect","ownProps","emailVerificationSelector","isEmailPasswordVerificationSentSelector","isEmailVerificationUserExistSelector","emailVerificationTokenInUrlSelector","isEmailIsResetExpiredSelector","isEmailIsBadTokenSelector","isLoadingSelector","dispatch","getPasswordResetActionCreator","getEmailVerificationResendActionCreator","getPasswordResetSetPasswordActionCreator","ForgotPassword","Container","forgotPasswordForm","maxWidth","CrispChatContainer","ForgotPasswordContainer","AuthenticatedMapStateToProps","AuthenticatedMapDispatchToProps"],"mappings":"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","file":"static/js/ForgotPasswordContainer.632df541.chunk.js","sourcesContent":["import React from 'react';\n\ninterface IUnAuthenticatedPageProps {\n  signedIn: boolean;\n  isEmailVerified?: boolean;\n  navigateOnLogin: () => void;\n}\n\ninterface IUnAuthenticatedPageState {\n  signedIn: boolean;\n}\n\nclass UnAuthenticatedPage extends React.Component<IUnAuthenticatedPageProps, IUnAuthenticatedPageState> {\n\n  state = {\n    signedIn: false\n  };\n\n  public static defaultProps = {\n    signedIn: false,\n    navigateToControlPanel: () => {\n      \n    },\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.signedIn !== (prevState && prevState.signedIn))\n      return {signedIn: nextProps.signedIn};\n    return null;\n  }\n\n  private handlePermissionBehavior() {\n    if (this.props.signedIn && this.props.signedIn !== null) {\n      this.props.navigateOnLogin();\n    }\n  }\n\n\n  componentDidUpdate(prevProps) {\n    this.handlePermissionBehavior();\n  }\n\n  componentDidMount() {\n    this.handlePermissionBehavior();\n  }\n\n  render() {\n    return (this.props.children);\n  }\n}\n\n\nexport default UnAuthenticatedPage;\n","import React from 'react';\nimport styles from './InputBox.module.scss';\nimport {ReactComponent as EclipseLoaderIcon} from 'assets/img/eclipseLoader.svg';\nimport {Grid, Typography} from '@material-ui/core';\nimport {linksMap} from 'data/utils/constants';\nimport LinkBlockContainer from 'data/redux/containers/linkBlockContainer';\nimport NextButton from 'gui/components/nextButton/NextButton';\n\ninterface IInputBoxProps {\n  title?: any;\n  description?: any;\n\n  nextButtonText?: string;\n  nextButtonLink?: string;\n  nextButtonClick?: () => void;\n  loading?: boolean;\n\n  middleComponents?: any;\n  bottomComponents?: any;\n}\n\nconst InputBox = ({loading, ...props}: IInputBoxProps) => <Grid\n  container\n  spacing={2}\n  className={styles.InputBox}>\n  <Grid item xs={12} style={{marginTop: 10}} sm={12}>\n    <Typography className={styles.topTitle} component=\"h1\" variant=\"h5\">\n      {loading ? <EclipseLoaderIcon className={styles.spinner}/> : props.title}\n    </Typography>\n  </Grid>\n  {props.description ? <Grid item xs={12} style={{marginTop: 10}} sm={12}>\n    {props.description}\n  </Grid> : null}\n  {props.middleComponents}\n  <Grid item xs={12}>\n    {props.nextButtonLink ? <LinkBlockContainer to={linksMap.forgotPassword}>\n      <NextButton>\n        {props.nextButtonText}\n      </NextButton>\n    </LinkBlockContainer> : null}\n    {props.nextButtonClick ? <NextButton\n      onClick={props.nextButtonClick}\n      loading={loading}\n    >\n      {props.nextButtonText}\n    </NextButton> : null}\n    {props.bottomComponents}\n  </Grid>\n</Grid>;\n\nInputBox.defaultProps = {};\n\nexport default React.memo(InputBox);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputBox\":\"InputBox_InputBox__29h_o\",\"topTitle\":\"InputBox_topTitle__2pe_K\",\"spinner\":\"InputBox_spinner__3vQiq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPasswordForm\":\"ForgotPassword_forgotPasswordForm__3VpYn\"};","import React from 'react';\nimport {Grid, Typography} from '@material-ui/core';\nimport {Form, Formik} from 'formik';\nimport * as Yup from \"yup\";\nimport {Else, If, Then} from 'react-if';\nimport LinkBlockContainer from 'data/redux/containers/linkBlockContainer';\nimport {linksMap} from 'data/utils/constants';\nimport InputBox from 'gui/components/inputBox';\nimport NextButton from 'gui/components/nextButton/NextButton';\nimport FormikTextInput from 'gui/components/formikTextInput';\n\ninterface IForgotPasswordBeforeEmailFormProps {\n  emailVerification?: { email: string, verified: boolean, sent: boolean; passwordVerificationSent: boolean; };\n  sendPasswordReset: (formValues) => Promise<any>;\n  sendEmailVerification: (formValues) => Promise<any>;\n  passwordVerificationSent: boolean;\n  userExist: boolean;\n  loading?: boolean;\n}\n\nconst ForgotPasswordBeforeEmailForm = ({loading, ...props}: IForgotPasswordBeforeEmailFormProps) => {\n  const emailVerified = (props.emailVerification && typeof props.emailVerification === 'object') ? (typeof props.emailVerification.verified === 'boolean' ? props.emailVerification.verified : true) : true;\n  return (\n    <Formik\n      initialValues={{\n        email: props.emailVerification ? props.emailVerification.email : \"\",\n      }}\n      validationSchema={Yup.object({\n        email: Yup.string()\n          .email(\"מייל לא תקין\")\n          .required(\"נדרש מייל\")\n      })}\n      onSubmit={async (values, {setSubmitting}) => {\n        if (!emailVerified) {\n          props\n            .sendEmailVerification(values)\n            .then(() => {\n\n            });\n        } else {\n          props\n            .sendPasswordReset(values)\n            .then(() => {\n\n            });\n        }\n      }}\n    >\n      {({submitForm, isSubmitting, touched, values, errors, setFieldValue}) => (\n        <Form translate={null}>\n          <Grid container spacing={2}>\n            <If condition={!!props.emailVerification && props.userExist && !props.passwordVerificationSent}>\n              <Then>{() =>\n                <If condition={!!props.emailVerification.sent}>\n                  <Then>\n                    {() => <InputBox\n                      title={\"מייל אימות נשלח\"}\n                      description={<>\n                        <Typography component=\"p\" style={{marginBottom: 25}}>\n                          נשלח אימות למייל\n                          &nbsp;\n                          {props.emailVerification.email}\n                          &nbsp;\n                          אנא כנס לתיבה/ספאם ולחץ על הקישור שבמייל כדי לאמת.\n                          לאחר מכן אפשר יהיה לבצע שיחזור סיסמה.\n                        </Typography>\n                      </>}\n                      nextButtonText={\"נסה שוב לשחזר סיסמה עבודה\"}\n                      nextButtonClick={submitForm}\n                      loading={loading || isSubmitting}/>}\n                  </Then>\n                  <Else>\n                    {() => <InputBox\n                      title={\"המייל שלך לא מאומת\"}\n                      nextButtonText={\"לחץ פה כדי לשלוח קישור שחזור סיסמה חדש\"}\n                      description={<>\n                        <Typography component=\"p\" style={{marginBottom: 25}}>\n                          המייל שלך\n                          ({props.emailVerification.email})\n                          אינו מאומת,\n                          לפני שתוכל לשחזר את סיסמתך יש לאמת שהמייל הכן שייך לך.\n                          אנא כנס לתיבת המייל/ספאם ולחץ על הקישור אימות שנמצא במייל.\n                          ולאחר מכן יש לנסות שוב לשחזר סיסמה.\n                          עם אינך מוצא את המייל\n                        </Typography>\n                      </>}\n                      nextButtonClick={submitForm}\n                      loading={loading || isSubmitting}\n                    />}\n                  </Else>\n                </If>\n              }\n              </Then>\n              <Else>\n                {() =>\n                  <If condition={!props.passwordVerificationSent}>\n                    <Then>{() => <InputBox\n                      title={\"הזן את כתובת הדוא\\\"ל שלך\"}\n                      description={<>\n                        <FormikTextInput\n                          label='כתובת דוא\"ל'\n                          name=\"email\"\n                          autoComplete=\"email\"\n                          values={values}\n                          errors={errors}\n                          touched={touched}\n                          loading={loading}\n                        />\n                      </>}\n                      nextButtonText={\"שחזר סיסמה אבודה\"}\n                      nextButtonClick={submitForm}\n                      loading={loading || isSubmitting}\n                    />}\n                    </Then>\n                    <Else>{() =>\n                      <If condition={!!props.userExist}>\n                        <Then>\n                          <Grid item xs={12} style={{marginTop: 10}} sm={12}>\n                            <Typography component=\"p\" style={{marginBottom: 25}}>\n                              למייל\n                              ({props.emailVerification.email})\n                              נשלח קישור שחזור סיסמה,\n                              אנא לחץ על הקישור כדי להגדיר סיסמה חדשה.\n                            </Typography>\n                          </Grid>\n                        </Then>\n                        <Else>\n                          <Grid item xs={12} style={{marginTop: 10}} sm={12}>\n                            <Typography component=\"p\" style={{marginBottom: 25}}>\n                              המשתמש עם המייל\n                              ({props.emailVerification.email})\n                              אינו רשום במערכת.\n                            </Typography>\n                          </Grid>\n                          <Grid item xs={12} style={{marginTop: 10}} sm={12}>\n                            <LinkBlockContainer to={linksMap.register}>\n                              <NextButton>\n                                לחץ פה כדי להירשם\n                              </NextButton>\n                            </LinkBlockContainer>\n                          </Grid>\n                        </Else>\n                      </If>\n                    }\n                    </Else>\n                  </If>}\n              </Else>\n            </If>\n          </Grid>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nForgotPasswordBeforeEmailForm.defaultProps = {\n  onSubmit: (formValues) => new Promise((resolve) => {\n    \n    setTimeout(resolve, 1000);\n  }),\n  invalidLogin: false,\n};\n\nexport default React.memo(ForgotPasswordBeforeEmailForm);\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport {Form, Formik} from 'formik';\nimport * as Yup from \"yup\";\nimport FormikPasswordInput from 'gui/components/formikPasswordInput';\nimport InputBox from 'gui/components/inputBox';\n\ninterface IForgotPasswordBeforeEmailFormProps {\n  token: string;\n  updatePassword: (formValues) => Promise<any>;\n  isTokenExpired: boolean;\n  isBadToken: boolean;\n  loading?: boolean;\n}\n\nconst retypePasswordRandomName = `retype-new-password-${new Date().getTime() + Math.round(Math.random() * 1000)}`;\n\n\nconst ForgotPasswordAfterEmailTokenForm = ({loading, ...props}: IForgotPasswordBeforeEmailFormProps) => {\n  return (\n    <Formik\n      initialValues={{\n        token: props.token,\n        password: \"\",\n        [retypePasswordRandomName]: \"\",\n      }}\n      validationSchema={Yup.object({\n        token: Yup.string()\n          .min(1, \"נדרש להזין קוד\")\n          .max(100, \"קוד ארוך מדיי\")\n          .required(\"נדרש להזין קוד\"),\n        password: Yup.string()\n          .min(8, 'סיסמה קצרה מדיי, מינימום 8 אותיות או ספרות')\n          .max(80, 'סיסמה ארוכה מדיי')\n          .required('נדרשת סיסמה')\n          .matches(/[a-zA-Z0-9]/, 'סיסמה יכולה רק להכיל אותיות באנגלית ומספרים'),\n        [retypePasswordRandomName]: Yup.string()\n          .min(8, 'סיסמה קצרה מדיי, מינימום 8 אותיות או ספרות')\n          .max(80, 'סיסמה ארוכה מדיי')\n          .oneOf([Yup.ref('password'), undefined], 'סיסמה צריכה להיות תואמת')\n          .required(\"נדרש להזין סיסמה שוב\"),\n      })}\n      onSubmit={async ({token, password}, {setSubmitting}) => {\n        props.updatePassword({\n          token, password\n        });\n      }}\n    >\n      {({submitForm, isSubmitting, touched, errors}) => (\n        <Form translate={null}>\n          <InputBox\n            title={\"עדכון סיסמה חדשה\"}\n            middleComponents={<>\n              <Grid item style={{marginTop: 15}} xs={12} sm={6}>\n                <FormikPasswordInput\n                  label=\"סיסמה\"\n                  name=\"password\"\n                  loading={loading}\n                />\n              </Grid>\n              <Grid item style={{marginTop: 15}} xs={12} sm={6}>\n                <FormikPasswordInput\n                  label=\"סיסמה שוב\"\n                  name={retypePasswordRandomName}\n                  loading={loading}\n                />\n              </Grid>\n            </>}\n            loading={loading}\n            nextButtonText={\"עדכן סיסמה חדשה\"}\n            nextButtonClick={submitForm}\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nForgotPasswordAfterEmailTokenForm.defaultProps = {\n  onSubmit: (formValues) => new Promise((resolve) => {\n    \n    setTimeout(resolve, 1000);\n  }),\n  invalidLogin: false,\n};\n\nexport default React.memo(ForgotPasswordAfterEmailTokenForm);\n","import React from 'react';\nimport ForgotPasswordBeforeEmailForm from './components/forgotPasswordBeforeEmailForm';\nimport ForgotPasswordAfterEmailTokenForm from './components/forgotPasswordAfterEmailTokenForm';\nimport {linksMap} from 'data/utils/constants';\nimport InputBox from 'gui/components/inputBox';\n\ninterface IForgotPasswordFormProps {\n  emailVerification?: { email: string, verified: boolean, sent: boolean; passwordVerificationSent: boolean; };\n\n  passwordVerificationSent: boolean;\n  userExist: boolean;\n  token: string;\n  isTokenExpired: boolean;\n  isBadToken: boolean;\n\n  sendPasswordReset: (formValues) => Promise<any>;\n  sendEmailVerification: (formValues) => Promise<any>;\n  updatePassword: (formValues) => Promise<any>;\n  loading?: boolean;\n}\n\nconst ForgotPasswordForm = ({loading, ...props}: IForgotPasswordFormProps) => {\n\n  if (props.token) {\n    if (props.isTokenExpired) {\n      return (\n        <InputBox\n          title={\"תוקף הקישור שחזור סיסמה נגמר\"}\n          nextButtonLink={linksMap.forgotPassword}\n          nextButtonText={\"לחץ פה כדי לשלוח קישור שחזור סיסמה חדש\"}\n          loading={loading}\n        />);\n    } else if (props.isBadToken) {\n      return (<InputBox\n        title={\"תקלה בקוד שחזור\"}\n        nextButtonLink={linksMap.forgotPassword}\n        nextButtonText={\"לחץ פה כדי לשלוח קישור שחזור סיסמה חדש\"}\n        loading={loading}\n      />);\n    } else {\n      return (\n        <ForgotPasswordAfterEmailTokenForm loading={loading}  {...props}/>\n      );\n    }\n  } else\n    return (\n      <ForgotPasswordBeforeEmailForm loading={loading}  {...props}/>\n    );\n};\n\nForgotPasswordForm.defaultProps = {\n  onSubmit: (formValues) => new Promise((resolve) => {\n    \n    setTimeout(resolve, 1000);\n  }),\n  invalidLogin: false,\n};\n\nexport default React.memo(ForgotPasswordForm);\n","import {connect} from 'react-redux'\nimport {\n  getEmailVerificationResendActionCreator,\n  getPasswordResetActionCreator,\n  getPasswordResetSetPasswordActionCreator\n} from 'data/redux/actions/authenticationActions';\nimport ForgotPasswordForm from 'gui/pages/mainRouter/pages/forgotPassword/components/forgotPasswordForm';\nimport {\n  emailVerificationSelector,\n  emailVerificationTokenInUrlSelector,\n  isEmailIsBadTokenSelector,\n  isEmailIsResetExpiredSelector,\n  isEmailPasswordVerificationSentSelector,\n  isEmailVerificationUserExistSelector\n} from 'data/redux/selectors/authenticationSelector';\nimport {isLoadingSelector} from 'data/redux/selectors/guiSelector';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    emailVerification: emailVerificationSelector(state),\n    passwordVerificationSent: isEmailPasswordVerificationSentSelector(state),\n    userExist: isEmailVerificationUserExistSelector(state),\n    token: emailVerificationTokenInUrlSelector(state),\n    isTokenExpired: isEmailIsResetExpiredSelector(state),\n    isBadToken: isEmailIsBadTokenSelector(state),\n    loading: isLoadingSelector(state),\n    ...ownProps\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      sendPasswordReset: (formValues) => dispatch(getPasswordResetActionCreator(formValues)),\n      sendEmailVerification: (formValues) => dispatch(getEmailVerificationResendActionCreator(formValues)),\n      updatePassword: (formValues) => dispatch(getPasswordResetSetPasswordActionCreator(formValues)),\n    };\n  }\n;\n\nconst ForgotPasswordFormContainer = connect(mapStateToProps, mapDispatchToProps)(ForgotPasswordForm);\n\nexport default ForgotPasswordFormContainer;\n","import React from 'react';\nimport styles from './ForgotPassword.module.scss';\nimport {Container} from '@material-ui/core';\nimport UnAuthenticatedPage from 'gui/components/unAuthenticatedPage/UnAuthenticatedPage';\n\nimport ForgotPasswordFormContainer from 'data/redux/containers/forgotPasswordFormContainer/ForgotPasswordFormContainer';\nimport CrispChatContainer from 'data/redux/containers/crispChatContainer';\n\nclass ForgotPassword extends UnAuthenticatedPage {\n  render() {\n    return (\n      <Container className={styles.forgotPasswordForm} maxWidth=\"xs\">\n        <CrispChatContainer/>\n        <ForgotPasswordFormContainer/>\n      </Container>\n    );\n  }\n}\n\nexport default ForgotPassword;\n","import {connect} from 'react-redux'\nimport ForgotPassword from 'gui/pages/mainRouter/pages/forgotPassword/ForgotPassword';\nimport {AuthenticatedMapDispatchToProps, AuthenticatedMapStateToProps} from 'data/redux/containers/commons/Commons';\n\nconst mapStateToProps = (state) => {\n  return {\n    ...AuthenticatedMapStateToProps(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    ...AuthenticatedMapDispatchToProps(dispatch)\n  };\n};\n\nconst ForgotPasswordContainer = connect(mapStateToProps, mapDispatchToProps)(ForgotPassword);\n\nexport default ForgotPasswordContainer;\n"],"sourceRoot":""}