{"version":3,"sources":["gui/components/inputBox/InputBox.tsx","gui/components/inputBox/InputBox.module.scss","gui/pages/mainRouter/pages/verifyToken/VerifyToken.module.scss","gui/pages/mainRouter/pages/verifyToken/components/verifyTokenForm/VerifyTokenForm.module.scss","gui/pages/mainRouter/pages/verifyToken/components/verifyTokenForm/VerifyTokenForm.tsx","data/redux/containers/verifyTokenFormContainer/VerifyTokenFormContainer.ts","gui/pages/mainRouter/pages/verifyToken/VerifyToken.tsx","data/redux/containers/verifyTokenContainer/VerifyTokenContainer.ts"],"names":["InputBox","loading","props","container","spacing","className","styles","item","xs","style","marginTop","sm","topTitle","component","variant","spinner","title","description","middleComponents","nextButtonLink","to","linksMap","forgotPassword","nextButtonText","nextButtonClick","onClick","bottomComponents","defaultProps","React","memo","module","exports","VerifyTokenForm","useEffect","token","isEmailVerified","verifyToken","initialValues","validationSchema","Yup","min","max","required","onSubmit","values","a","setSubmitting","emailVerification","sendEmailVerification","then","submitForm","isSubmitting","touched","errors","setFieldValue","translate","emailVerificationSent","Typography","marginBottom","email","Grid","FormikTextInput","label","name","autoComplete","tokenNotFound","FormHelperText","error","Button","loginButtons","loginButton","fullWidth","disabled","resendToken","formValues","Promise","resolve","setTimeout","invalidLogin","VerifyTokenFormContainer","connect","state","ownProps","profileEmailSelector","emailVerificationSelector","isEmailVerificationSentSelector","isEmailVerificationVerifiedSelector","emailVerificationTokenInUrlSelector","authManagementErrorUserNotFoundSelector","isLoadingSelector","dispatch","getEmailTokenVerifyActionCreator","getEmailVerificationResendActionCreator","VerifyToken","this","signedIn","navigateOnLogin","Container","maxWidth","AuthenticatedPage","VerifyTokenContainer","skipRedirectCheck","eSkipRedirectCheck","AuthenticatedMapStateToProps","AuthenticatedMapDispatchToProps"],"mappings":"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","file":"static/js/VerifyTokenContainer.85b6fea1.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './InputBox.module.scss';\nimport {ReactComponent as EclipseLoaderIcon} from 'assets/img/eclipseLoader.svg';\nimport {Grid, Typography} from '@material-ui/core';\nimport {linksMap} from 'data/utils/constants';\nimport LinkBlockContainer from 'data/redux/containers/linkBlockContainer';\nimport NextButton from 'gui/components/nextButton/NextButton';\n\ninterface IInputBoxProps {\n  title?: any;\n  description?: any;\n\n  nextButtonText?: string;\n  nextButtonLink?: string;\n  nextButtonClick?: () => void;\n  loading?: boolean;\n\n  middleComponents?: any;\n  bottomComponents?: any;\n}\n\nconst InputBox = ({loading, ...props}: IInputBoxProps) => <Grid\n  container\n  spacing={2}\n  className={styles.InputBox}>\n  <Grid item xs={12} style={{marginTop: 10}} sm={12}>\n    <Typography className={styles.topTitle} component=\"h1\" variant=\"h5\">\n      {loading ? <EclipseLoaderIcon className={styles.spinner}/> : props.title}\n    </Typography>\n  </Grid>\n  {props.description ? <Grid item xs={12} style={{marginTop: 10}} sm={12}>\n    {props.description}\n  </Grid> : null}\n  {props.middleComponents}\n  <Grid item xs={12}>\n    {props.nextButtonLink ? <LinkBlockContainer to={linksMap.forgotPassword}>\n      <NextButton>\n        {props.nextButtonText}\n      </NextButton>\n    </LinkBlockContainer> : null}\n    {props.nextButtonClick ? <NextButton\n      onClick={props.nextButtonClick}\n      loading={loading}\n    >\n      {props.nextButtonText}\n    </NextButton> : null}\n    {props.bottomComponents}\n  </Grid>\n</Grid>;\n\nInputBox.defaultProps = {};\n\nexport default React.memo(InputBox);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputBox\":\"InputBox_InputBox__29h_o\",\"topTitle\":\"InputBox_topTitle__2pe_K\",\"spinner\":\"InputBox_spinner__3vQiq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"verifyToken\":\"VerifyToken_verifyToken__3u34i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginButtons\":\"VerifyTokenForm_loginButtons__W_ivA\",\"loginButton\":\"VerifyTokenForm_loginButton__1Pqq_\",\"resendToken\":\"VerifyTokenForm_resendToken__2OjkL\"};","import React, {useEffect} from 'react';\nimport {Button, FormHelperText, Grid, Typography} from '@material-ui/core';\nimport {Form, Formik} from 'formik';\nimport * as Yup from \"yup\";\nimport styles from './VerifyTokenForm.module.scss';\nimport FormikTextInput from 'gui/components/formikTextInput';\nimport InputBox from 'gui/components/inputBox';\n\ninterface ISignUpFormProps {\n  email: string;\n  token: string;\n  emailVerification?: { email: string, verified: boolean, sent: boolean; };\n\n  verifyToken: (token?) => Promise<any>;\n  sendEmailVerification: (formValues?) => Promise<any>;\n  tokenNotFound?: boolean;\n  emailVerificationSent: boolean;\n  isEmailVerified: boolean;\n  loading?: boolean;\n}\n\nconst VerifyTokenForm = ({loading, ...props}: ISignUpFormProps) => {\n  useEffect(() => {\n    if (props.token && !props.isEmailVerified) {\n      props.verifyToken(props.token);\n    }\n  }, [props.verifyToken, props.token, props.isEmailVerified]);\n  return (\n    <Formik\n      initialValues={{\n        token: props.token || \"\",\n      }}\n      validationSchema={Yup.object({\n        token: Yup.string()\n          .min(1, \"נדרש להזין קוד\")\n          .max(100, \"קוד ארוך מדיי\")\n          .required(\"נדרש להזין קוד\")\n      })}\n      onSubmit={async (values, {setSubmitting}) => {\n        if (props.emailVerification) {\n          props\n            .sendEmailVerification(values)\n            .then(() => {\n\n            });\n        } else {\n          props\n            .verifyToken(values.token)\n            .then(() => {\n\n            });\n        }\n      }}\n    >\n      {({submitForm, isSubmitting, touched, errors, setFieldValue, values}) => (\n        <Form translate={null}>\n          <InputBox\n            title={props.emailVerificationSent ? \"מייל אימות נשלח\" : \"אימות מייל\"}\n            description={\n              !loading && (\n                props.emailVerificationSent ? <Typography component=\"p\" style={{marginBottom: 25}}>\n                    שלחנו מייל אימות למייל\n                    &nbsp;\n                    {props.email}\n                    &nbsp;\n                    אנא כנס/י לתיבת המייל הקליקו על לינק האימות\n                    <br/>\n                    או העתיקו את הקוד מההודעה והזינו כאן\n                  </Typography> :\n\n                  <Typography component=\"p\">\n                    שלחנו מייל אימות למייל\n                    &nbsp;\n                    {props.email}\n                    &nbsp;\n                    אנא כנס/י לתיבת המייל הקליקו על לינק האימות\n                    <br/>\n                    או העתיקו את הקוד מההודעה והזינו כאן\n                  </Typography>)\n            }\n            loading={loading}\n            bottomComponents={<>\n              <Grid item xs={12} style={{marginTop: 10}} sm={12}>\n                <FormikTextInput\n                  label=\"קוד\"\n                  name=\"token\"\n                  autoComplete=\"token\"\n                  values={values}\n                  errors={errors}\n                  touched={touched}\n                  loading={loading}\n                />\n                {props.tokenNotFound ?\n                  <FormHelperText error>הקוד לא תקין או פג תוקף, אנא לחץ על שלח שוב</FormHelperText> : null}\n              </Grid>\n              <Grid item style={{marginTop: 15}} xs={12}>\n                <Button\n                  className={`${styles.loginButtons} ${styles.loginButton}`}\n                  fullWidth\n                  variant=\"contained\"\n                  disabled={isSubmitting}\n                  onClick={submitForm}\n                >\n                  אמת קוד\n                </Button>\n              </Grid>\n              <Grid item xs={12} style={{marginTop: 10}} sm={12}>\n                <Button\n                  className={`${styles.loginButtons} ${styles.resendToken}`}\n                  fullWidth\n                  variant=\"contained\"\n                  onClick={async () => {\n                    if (values.token) {\n                      await setFieldValue(\"token\", \"\", false);\n                    }\n                    await props\n                      .sendEmailVerification()\n                  }}\n                >\n                  שלח שוב מייל אימות\n                </Button>\n              </Grid>\n            </>}\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nVerifyTokenForm.defaultProps = {\n  onSubmit: (formValues) => new Promise((resolve) => {\n    \n    setTimeout(resolve, 1000);\n  }),\n  invalidLogin: false,\n};\n\nexport default React.memo(VerifyTokenForm);\n","import {connect} from 'react-redux'\nimport {\n  getEmailTokenVerifyActionCreator,\n  getEmailVerificationResendActionCreator\n} from 'data/redux/actions/authenticationActions';\nimport {\n  authManagementErrorUserNotFoundSelector,\n  emailVerificationSelector,\n  emailVerificationTokenInUrlSelector,\n  isEmailVerificationSentSelector,\n  isEmailVerificationVerifiedSelector\n} from 'data/redux/selectors/authenticationSelector';\nimport VerifyTokenForm from 'gui/pages/mainRouter/pages/verifyToken/components/verifyTokenForm';\nimport {profileEmailSelector} from 'data/redux/selectors/userSelector';\nimport {isLoadingSelector} from 'data/redux/selectors/guiSelector';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    email: profileEmailSelector(state),\n    emailVerification: emailVerificationSelector(state),\n\n    emailVerificationSent: isEmailVerificationSentSelector(state),\n    isEmailVerified: isEmailVerificationVerifiedSelector(state),\n\n    token: emailVerificationTokenInUrlSelector(state),\n    tokenNotFound: authManagementErrorUserNotFoundSelector(state),\n\n    loading: isLoadingSelector(state),\n    ...ownProps\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      verifyToken: (token) => dispatch(getEmailTokenVerifyActionCreator(token)),\n      sendEmailVerification: (formValues) => dispatch(getEmailVerificationResendActionCreator(formValues)),\n    };\n  }\n;\n\nconst VerifyTokenFormContainer = connect(mapStateToProps, mapDispatchToProps)(VerifyTokenForm) as any;\n\nexport default VerifyTokenFormContainer;\n","import React from 'react';\nimport styles from './VerifyToken.module.scss';\nimport {Container} from '@material-ui/core';\nimport VerifyTokenFormContainer from 'data/redux/containers/verifyTokenFormContainer/VerifyTokenFormContainer';\nimport AuthenticatedPage from 'gui/components/authenticatedPage';\n\nclass VerifyToken extends AuthenticatedPage<any> {\n  protected handlePermissionBehavior() {\n    if (!this.props.loading) {\n      if (this.props.isEmailVerified && this.props.signedIn && this.props.signedIn !== null) {\n        this.props.navigateOnLogin();\n      } else {\n        super.handlePermissionBehavior();\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Container className={styles.verifyToken} maxWidth=\"xs\">\n        <VerifyTokenFormContainer/>\n      </Container>\n    );\n  }\n}\n\nexport default VerifyToken;\n","import {connect} from 'react-redux'\nimport VerifyToken from 'gui/pages/mainRouter/pages/verifyToken';\nimport {AuthenticatedMapDispatchToProps, AuthenticatedMapStateToProps} from 'data/redux/containers/commons';\nimport {eSkipRedirectCheck} from 'gui/components/authenticatedPage';\nimport {isLoadingSelector} from 'data/redux/selectors/guiSelector';\n\nconst mapStateToProps = (state) => {\n  return {\n    skipRedirectCheck: [eSkipRedirectCheck.emailVerification],\n    loading: isLoadingSelector(state),\n    ...AuthenticatedMapStateToProps(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    ...AuthenticatedMapDispatchToProps(dispatch)\n  };\n};\n\nconst VerifyTokenContainer = connect(mapStateToProps, mapDispatchToProps)(VerifyToken);\n\nexport default VerifyTokenContainer;\n"],"sourceRoot":""}